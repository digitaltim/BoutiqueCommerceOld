1) work on todo list

finish infrastructure functionality

- ADMIN NAVIGATION
-- fix html errors - many bottom </div> match nothing
-- messaging (flash? may be able to simply pass from controller to view). update: flash messages only work on redirect, try using $_SESSION['adminMessages'][] (array so we can have multiple). another update, not sure whether we should use flash messaging for this or at all. may be more useful (and pretty easy) to populate $_SESSION['adminMessages'][] and make it globally available to twig, then spit it back and empty it.
-- use named paths for links

- AUTHENTICATION
-- decide what to do if there are too many failed login attempts
-- have a config var for # failed login attempts that causes action
-- add middleware check failures to event log (ie unauthenticated user tries to access page)

- VIEW ADMIN
-- add delete (owner only)

- EDIT/INSERT ADMIN
-- if passwords match values should be repopulated

- AUTHORIZATION
-- add middleware check failures to event log  (ie unauthorized user tries to access page)
-- only owner,director can add/edit/delete admins (director cannot delete owner, owner cannot delete himself). page level so only authorized users can access page, block level as necessary so links only appear for authorized users.

- OLD INPUT
-- use a middleware to put posted vars into a session var instead of $_SESSION['formInput'] = $request->getParams(); in every post controller method.

-CSRF
-- edit the failure message - see https://github.com/slimphp/Slim-Csrf#token-persistence ('after a failed CSRF check. In this case, you will probably want to detect this condition and instruct your users to reload the page in their legitimate browser tab (or automatically reload on the next failed request).'
-- do we need to redirect?

- Do we still need ListView.php and ListViewModel.php?

- DO I UNDERSTAND THE FRAMEWORK
-- What does registering controller / factories in dependencies do? When they are commented out the script still runs. it makes them available to use in controllers or views (wherever the container is passed). some testing probably still in order on this.
-- What services need instantiation in base classes, ex. Controller and AdminView? (plus DRY)

- DOCUMENTATION
-- Build docs section in nav...
--- structure (which docs will be displayed in the admin nav section (help) and which in the GitHub page (developer resources)?)
-- Create installation instructions

- How should gulp autogenerated files be handled in version control? Ex. commits for js/scss mods (get .map files - ignore? what about frontend js/css?) (This appears to be a setup/install issue where we define how to use and setup gulp... Needs to be defined in the installation instructions)

- Create database backup script by modifying existing script. Add instructions how to use. Ex. (cron?)

- Create custom 'Page Not Found' error page that gives the name of the store (config[store_name] and additional detail as needed. Ex. https://btq/CRUD/testimonials/delete/

- Configure application/apache to ignore trailing slashes in URLs

- In /utilities/functions.php
--- isLiveServer() ?

- CODING STANDARDS
-- Should we use docblocks for all classes, methods, properties (?)
-- use typehints on params and return params

- MONOLOG EVENT LOGGING
- for: admin log in attempts exceeded

- INFRASTRUCTURE
-- how to prevent xss from rogue admins? (chunk of html problem: https://www.perl.com/pub/2002/02/20/css.html). does twig prevent it or does |raw thwart that? => using |raw is potentiall unsafe: https://vivait.co.uk/labs/safely-escape-twigs-json_encode-without-using-raw
-- fork infrastructure to a new repo
-- the schema should only contain the admins table and maybe a test table in the forked repo

OTHER
- Explore https://pages.github.com/
- Explore https://github.com/features/project-management/
- Possibly ask some of the "Do I understand" questions on Slim forum to get answers.