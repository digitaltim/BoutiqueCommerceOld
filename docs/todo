1) work on todo list

finish infrastructure functionality

- CRUD
-- test all tables (insert, update, delete, verify enum types)
--- fix any FF/validation errors
--- update schema - remove unused tables, change unique indexes to unique constraints, drop default '' and not nullable for not nullable fields on a case by case basis.
--- create custom dbtable models as necessary
--- render views, error views and messages from CrudView
--- display error for update with no changes made
--- why does view render call not work in setModel (CrudView and CrudController)? (and DRY)

- ADMIN NAVIGATION
-- item configurability
-- messaging (flash? may be able to simply pass from controller to view)
-- nav should not show in sign in page (admin dir)
-- make sure {LOCAL TESTING} appears only for dev (use islive in env)

- AUTHENTICATION
-- change to use FF, new Validator, and AdminsModel (look at example in vendor and CrudView formgenerate(). Also call queries from Model)
-- config var for session timeout (seconds to live in session variable which shouhld live in the config/init)
-- All admin pages should route through ($config['dirs']['admin'])
-- upon successful login set response to desired route/page

- AUTHORIZATION
-- (page level, admin nav, functionality - ie only owner/director can enter new admins - see DbTable::hasInsertPermission())
-- create ADMINS page like old system to change passwords and add new users
-- change admins.permissions to admins.role as a varchar (50) that is controlled in the app - enum var with options: (Owner, Director, Manager, Admin, Store, Vendor, Bookkeeper) Shipper(?)
-- only owner/director can insert new admins (see Authorization)

- DO I UNDERSTAND THE FRAMEWORK
-- What does registering controller / factories in dependencies do? When they are commented out the script still runs?
-- Should FF functions be made available to Twig templates by registering it as global to the view in dependencies?
-- What services need instantiation in base classes, ex. Controller and AdminView? (plus DRY)

- DOCUMENTATION
-- Build docs section in nav...
--- structure (which docs will be displayed in the admin nav section (help) and which in the GitHub page (developer resources)?)
-- Create installation instructions

- How should gulp autogenerated files be handled in version control? Ex. commits for js/scss mods (get .map files - ignore? what about frontend js/css?) (This appears to be a setup/install issue where we define how to use and setup gulp... Needs to be defined in the installation instructions)

- Create database backup script by modifying existing script. Add instructions how to use. Ex. (cron?)

- Create custom 'Page Not Found' error page that gives the name of the store (config[store_name] and additional detail as needed. Ex. https://btq/CRUD/testimonials/delete/

- Configure application/apache to ignore trailing slashes in URLs

- Use pathFor() functionality to create named routes. Ex. in CrudView index function for new UiRsDbTable?

- Group the routes for
-- Naming simplification
-- Using authorization middleware (similar to the authentication middleware)

- Validation
-- Refactor Validator::isDbDate() and isDbTimestamp using Regex
-- Consider use cases for Respect/Validation vs. integrated based on Simple Validator... Should we use the simple for everthing when the decision to switch was based on getting validation in CRUD working?

- In /utilities/functions.php
-- Remove unused functions. remove functions based on old page controller model that don't apply to front controller.
-- Find a better place for getFormFieldFromDbColumn()

- CODING STANDARDS
-- Should we use docblocks for all classes, methods, properties (?)
-- use typehints on params and return params

- INFRASTRUCTURE
-- how to prevent xss from rogue admins? (chunk of html problem: https://www.perl.com/pub/2002/02/20/css.html). does twig prevent it or does |raw thwart that? => using |raw is potentiall unsafe: https://vivait.co.uk/labs/safely-escape-twigs-json_encode-without-using-raw
-- fork infrastructure to a new repo

- Improve directory structure: (?) *, **
* possible directory structure
BoutiqueCommerce
.gitignore
composer.json
composer.lock
gulpfile.js
LICENSE.md
postgresDump.sql
-app
-routes.php
--config
--controllers
--infrastructure
--Auth.php
---database
---services
--middleware
--models
--public
--services
--ui
--utilities
-docs
-node_modules
-prebuild
-storage
-vendor

** alternate possible dir struct
BoutiqueCommerce
.gitignore
composer.json
composer.lock
LICENSE.md
README.md
pgDbSchemaDump.sql
-src
 -public
  .htaccess
  index.php
  -css..
  -js..
 -infrastructure
  NavAdmin.php
  -CRUD
   CrudController.php
   CrudView.php
  -Authentication
   AuthenticationController.php
   AuthenticationView.php
   AuthenticationMiddleware.php
   GuestMiddleware.php
  -Authorization..
  -Database
   DbTable.php
   DbColumn.php
   PgDbAccessService.php
   -QueryBuilder
    QueryBuilder.php
    InsertUpdateBuilder.php
    InsertBuilder.php
    UpdateBuilder.php
  -Utilities
   CsrfViewMiddleware.php
   OldInputMiddleware.php (?)
   ValidatorService.php
   PhpMailerService.php
   MessagingAdmin.php (? - flash)
 -config..
  routes.php
 -domain (ie biz)
  Nav.php
  -BusinessObjects
   OrdersModel.php
   CustomersModel.php
   ..
  -Views
   -Admin.. (pages ie OrdersListView.php)
   -Public.. (pages ie AboutUsView.php)
 -templates
-docs..
-prebuild
 gulpfile.js
 -node_modules
 -js..
 -scss..

-vendor..
-storage
 -cache..
 -logs..


OTHER
- Explore https://pages.github.com/
- Explore https://github.com/features/project-management/
- Possibly ask some of the "Do I understand" questions on Slim forum to get answers.