1) work on todo list

finish infrastructure functionality

- ADMIN NAVIGATION
-- fix html errors - many bottom </div> match nothing
-- messaging (flash? may be able to simply pass from controller to view). update: flash messages only work on redirect, try using $_SESSION['adminMessages'][] (array so we can have multiple). another update, not sure whether we should use flash messaging for this or at all. may be more useful (and pretty easy) to populate $_SESSION['adminMessages'][] and make it globally available to twig, then spit it back and empty it.
-- use named paths for links

- AUTHENTICATION
-- decide what to do if there are too many failed login attempts
-- have a config var for # failed login attempts that causes action

- ADD NEW ADMIN
-- add the other db fields to the page

- EDIT ADMIN
-- create the page

- DELETE ADMIN
-- create the ability

- AUTHORIZATION
-- (page level, admin nav, functionality - ie only owner/director can enter new admins - see DbTable::hasInsertPermission())
-- create ADMINS page like old system to change passwords and add new users
-- change admins.permissions to admins.role as a varchar (50) that is controlled in the app - enum var with options: (Owner, Director, Manager, Admin, Store, Vendor, Bookkeeper) Shipper(?)
-- only owner/director can insert new admins (see Authorization)

- OUTPUT
-- change all twig output files to extend base.twig

- OLD INPUT
-- use a middleware to put posted vars into a session var instead of $_SESSION['formInput'] = $request->getParams(); in every post controller method.

- DO I UNDERSTAND THE FRAMEWORK
-- What does registering controller / factories in dependencies do? When they are commented out the script still runs. it makes them available to use in controllers or views (wherever the container is passed). some testing probably still in order on this.
-- What services need instantiation in base classes, ex. Controller and AdminView? (plus DRY)

- DOCUMENTATION
-- Build docs section in nav...
--- structure (which docs will be displayed in the admin nav section (help) and which in the GitHub page (developer resources)?)
-- Create installation instructions

- How should gulp autogenerated files be handled in version control? Ex. commits for js/scss mods (get .map files - ignore? what about frontend js/css?) (This appears to be a setup/install issue where we define how to use and setup gulp... Needs to be defined in the installation instructions)

- Create database backup script by modifying existing script. Add instructions how to use. Ex. (cron?)

- Create custom 'Page Not Found' error page that gives the name of the store (config[store_name] and additional detail as needed. Ex. https://btq/CRUD/testimonials/delete/

- Configure application/apache to ignore trailing slashes in URLs

- Use pathFor() functionality to create named routes. Ex. in CrudView index function for new UiRsDbTable?

- Validation
-- Refactor Validator::isDbDate() and isDbTimestamp using Regex

- In /utilities/functions.php
-- Remove unused functions. remove functions based on old page controller model that don't apply to front controller.
-- Find a better place for getFormFieldFromDbColumn(). update - will do when improving directory structure.
--- isLiveServer() ?

- CODING STANDARDS
-- Should we use docblocks for all classes, methods, properties (?)
-- use typehints on params and return params

- MONOLOG EVENT LOGGING
- for: admin log in attempts exceeded

- INFRASTRUCTURE
-- how to prevent xss from rogue admins? (chunk of html problem: https://www.perl.com/pub/2002/02/20/css.html). does twig prevent it or does |raw thwart that? => using |raw is potentiall unsafe: https://vivait.co.uk/labs/safely-escape-twigs-json_encode-without-using-raw
-- fork infrastructure to a new repo
-- the schema should only contain the admins table and maybe a test table in the forked repo

- Improve directory structure: (?) *, **
* possible directory structure
BoutiqueCommerce
.gitignore
composer.json
composer.lock
gulpfile.js
LICENSE.md
postgresDump.sql
-app
-routes.php
--config
--controllers
--infrastructure
--Auth.php
---database
---services
--middleware
--models
--public
--services
--ui
--utilities
-docs
-node_modules
-prebuild
-storage
-vendor

** alternate possible dir struct
BoutiqueCommerce
.gitignore
composer.json
composer.lock
LICENSE.md
README.md
pgDbSchemaDump.sql
-src
 -public
  .htaccess
  index.php
  -css..
  -js..
 -infrastructure
  NavAdmin.php
  -CRUD
   CrudController.php
   CrudView.php
  -Authentication
   AuthenticationController.php
   AuthenticationView.php
   AuthenticationMiddleware.php
   GuestMiddleware.php
  -Authorization..
  -Database
   DbTable.php
   DbColumn.php
   PgDbAccessService.php
   -QueryBuilder
    QueryBuilder.php
    InsertUpdateBuilder.php
    InsertBuilder.php
    UpdateBuilder.php
  -Utilities
   ValidatorService.php
   PhpMailerService.php
   MessagingAdmin.php (? - flash)
 -config..
  routes.php
 -domain (ie biz)
  Nav.php
  -BusinessObjects
   OrdersModel.php
   CustomersModel.php
   ..
  -Views
   -Admin.. (pages ie OrdersListView.php)
   -Public.. (pages ie AboutUsView.php)
 -templates
-docs..
-prebuild
 gulpfile.js
 -node_modules
 -js..
 -scss..

-vendor..
-storage
 -cache..
 -logs..
-ignored


OTHER
- Explore https://pages.github.com/
- Explore https://github.com/features/project-management/
- Possibly ask some of the "Do I understand" questions on Slim forum to get answers.